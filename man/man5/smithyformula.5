.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "SMITHYFORMULA" "5" "August 2013" "" ""
.
.SH "NAME"
\fBsmithyformula\fR \- writing formulas for smithy
.
.SH "DESCRIPTION"
The main goal of formulas is to consolidate all knowledge required to build a software package\. This can include:
.
.IP "\(bu" 4
defining dependencies
.
.IP "\(bu" 4
loading or swapping modules
.
.IP "\(bu" 4
setting environment variables
.
.IP "\(bu" 4
applying patches
.
.IP "\(bu" 4
creating or changing makefiles
.
.IP "\(bu" 4
running the compilation
.
.IP "\(bu" 4
running tests
.
.IP "\(bu" 4
defining a modulefile
.
.IP "" 0
.
.P
Once written it\'s easy to see everything required to build a given piece of software\. Reproducing those steps is as simple as running one command but only if the formula is as complete as possible\.
.
.P
It\'s common for build scripts to run the compilation but omit patches, changes to makefile, or any other modification to the source\. With formulas it\'s easy to make patches and output any files needed to compile software\.
.
.SH "CREATING NEW FORMULAS"
The best way to create a new formula is to start with a working example\. There are many complete working examples in the smithy_formulas repo \fIhttps://github\.com/AnthonyDiGirolamo/smithy_formulas\fR\.
.
.P
If you want to create a new formula from scratch you can use the \fBsmithy formula new\fR subcommand\. For more info on this command run \fBsmithy help formula new\fR\. To create a new formula file you need to know the homepage and a url to download the file\. To create a new formula for subversion you might run:
.
.IP "" 4
.
.nf

smithy formula new \e
  \-\-name=subversion \e
  \-\-homepage=http://subversion\.apache\.org/ \e
  http://mirror\.cogentco\.com/pub/apache/subversion/subversion\-1\.7\.8\.tar\.bz2
.
.fi
.
.IP "" 0
.
.P
The format of the new sub\-command is \fBsmithy formula new [command options] URL\fR\. The options and arguments are:
.
.TP
\fB\-\-name\fR
This is the name used for the formula file and class, if omitted smithy will try to guess the name based on the download URL
.
.TP
\fB\-\-homepage\fR
This should be the main homepage for the software
.
.TP
\fBURL\fR
A download URL for the software, this argument is required but may be "none" if you plan to checkout the code through a version control system or copy from another location as part of the formula
.
.P
This will create a formula file inside \fB~/\.smithy/formulas\fR or the first formula directory specified in the \fB$SMITHY_CONFIG\fR file\. In either case, the full path to that file will be displayed\.
.
.SH "STRUCTURE"
Formulas attempt to create a domain specific language with the support of a full programming language, ruby\. The structure of a formula is the same as a ruby class\. For example:
.
.IP "" 4
.
.nf

class SubversionFormula < Formula

end
.
.fi
.
.IP "" 0
.
.P
Every method call that defines the formula will happen between these two lines\.
.
.SS "FORMULA FILE AND CLASS NAMING"
Formulas follow a specifc naming scheme\. The filename should end in \fB\'_formula\.rb\'\fR and start with the name of the software in all lowercase characters\. The class name should be the same name specified in the file but CamelCased \fIhttp://en\.wikipedia\.org/wiki/CamelCase\fR and end in \fB\'Formula\'\fR\.
.
.SS "RUBY BASICS"
We will cover most of the basics you need for formula writing here but if you would like more info on ruby you might read through Ruby in Twenty Minutes \fIhttp://www\.ruby\-lang\.org/en/documentation/quickstart/\fR or try another source on the Ruby Documentation \fIhttp://www\.ruby\-lang\.org/en/documentation/\fR page\.
.
.SH "FORMULA DSL METHODS"
These methods should be defined at the highest level of the formula file, right after the \fBclass GitFormula < Formula\fR line\.
.
.SS "homepage"
\fBREQUIRED\fR \- Defines the homepage, e\.g\. "http://git\-scm\.com/"
.
.SS "url"
\fBREQUIRED\fR \- The full URL to download a package, e\.g\. "http://git\-core\.googlecode\.com/files/git\-1\.8\.3\.4\.tar\.gz" may also be "none"
.
.SS "sha1,sha256,md5"
A hash of the downloaded file to verify the download performed correctly, e\.g\. \fBsha1 "fe633d02f7d964842d7ea804278b75120fc60c11"\fR
.
.SS "version"
Manually define the version number, if omitted smithy will guess the version number from the url\. This works best when the filename in a url follows the name\-version\.tar\.\.\. format\.
.
.SS "depends_on"
This method expects either a single string or an array of strings that define dependencies for this formula\. e\.g\.
.
.IP "" 4
.
.nf

depends_on "curl"
depends_on [ "cmake", "qt", "openssl", "sqlite" ]
depends_on %w{ cmake qt openssl sqlite }
.
.fi
.
.IP "" 0
.
.P
Using this method ensures that if a given dependency is not met smithy will abort the installation\. It also provides a way to query dependent packages information within the install method later on\. For example if you write \fBdepends_on "curl"\fR in your formula you gain access to an object named curl inside the install method\. This allows you to do things like:
.
.IP "" 4
.
.nf

system "\./configure \-\-prefix=#{prefix} \-\-with\-curl=#{curl\.prefix}"
.
.fi
.
.IP "" 0
.
.P
In the above example \fB#{curl\.prefix}\fR is an example of a ruby interpolated string, everything between the \fB#{ }\fR is ruby code\. \fBcurl\.prefix\fR will return a string with the location curl is installed in\.
.
.P
The strings passed to \fBdepends_on\fR are just the locations of installed software\. If you required a specific version of a dependency you could use specify the version or build numbers of existing installed software\. e\.g\.
.
.IP "" 4
.
.nf

depends_on [ "cmake/2\.8\.11\.2/sles11\.1_gnu4\.3\.4", "qt/4\.8\.5", "sqlite" ]
.
.fi
.
.IP "" 0
.
.P
Assuming your software root is \fB/sw/xk6\fR smithy would look for the above software installs in \fB/sw/xk6/cmake/2\.8\.11\.2/sles11\.1_gnu4\.3\.4\fR \fB/sw/xk6/qt/4\.8\.5/*\fR and \fB/sw/xk6/sqlite/*/*\fR\. The \fB*\fR works similar to shell globbing\. If you needed to install a python module that depends on a specific version of another python module you might use:
.
.IP "" 4
.
.nf

depends_on [ "python/3\.3\.0", "python_numpy/1\.7\.1/*python3\.3\.0*" ]
.
.fi
.
.IP "" 0
.
.P
This would require a given formula to have access to both \fB/sw/xk6/python/3\.3\.0/*\fR and a python module with a build name that includes \fBpython3\.3\.0\fR located at \fB/sw/x6/python_numpy/1\.7\.1/*python3\.3\.0*\fR
.
.P
You will also probably need to specifiy dependencies conditionally upon the type of build you are performing\. It\'s recommended to add the type of build to the build name when installing\. Given that, you can key off build names to specify dependencies\. Taking the python example further, lets extend it to support multiple versions of python\. You can pass a ruby block to the \fBdepends_on\fR method to make it more dynamic\. The syntax for this is:
.
.IP "" 4
.
.nf

depends_on do
  \.\.\.
end
.
.fi
.
.IP "" 0
.
.P
Any ruby code may go in here the last executed line of the block should be an array of strings containting the dependencies\. Lets use a ruby case statement for this:
.
.IP "" 4
.
.nf

depends_on do
  case build_name
  when /python3\.3/
    [ "python/3\.3\.0", "python_numpy/1\.7\.1/*python3\.3\.0*" ]
  when /python2\.7/
    [ "python/2\.7\.3", "python_numpy/1\.7\.1/*python2\.7\.3*" ]
  end
end
.
.fi
.
.IP "" 0
.
.P
This allows the formula to set it\'s dependencies based off the type of build thats being performed\. Lets say this formula is \fBpython_matplotlib\fR\. You could run either of these commands to install it and expect the dependencies to be set correctly:
.
.IP "" 4
.
.nf

smithy formula install python_matplotlib/1\.2\.3/python3\.3\.0
smithy formula install python_matplotlib/1\.2\.3/python2\.7\.3
.
.fi
.
.IP "" 0
.
.SS "module_commands"
something
.
.SS "modules"
something
.
.SS "modulefile"
This method expects the a string that represents the modulefile\. Generally modulefiles in smithy take two forms ones that point to a single build and ones that use multiple builds and set the build based on a users environment (already loaded modules)\. It\'s recommended to have one modulefile per application version and set multiple builds dynamically inside the modulefile\.
.
.P
Writing modulefiles is a topic in and of itself\. For details on the modulefile format see the modulefile(4) manpage \fIhttp://modules\.sourceforge\.net/man/modulefile\.html\fR Modulefiles are written in tcl and can take many forms\.
.
.P
Here is an example of a modulefile that points to a single build\. It\'s convenient to use heredoc string quoting in ruby so that the string can span multiple lines\. e\.g\.
.
.IP "" 4
.
.nf

modulefile <<\-MODULEFILE\.strip_heredoc
  #%Module
  proc ModulesHelp { } {
     puts stderr "<%= @package\.name %> <%= @package\.version %>"
     puts stderr ""
  }
  module\-whatis "<%= @package\.name %> <%= @package\.version %>"

  set PREFIX <%= @package\.prefix %>

  prepend\-path PATH            $PREFIX/bin
  prepend\-path LD_LIBRARY_PATH $PREFIX/lib
  prepend\-path MANPATH         $PREFIX/share/man
MODULEFILE
.
.fi
.
.IP "" 0
.
.P
The modulefile definition uses the erb format \fIhttp://ruby\-doc\.org/stdlib\-2\.0/libdoc/erb/rdoc/ERB\.html\fR Anything between the \fB<%= \.\.\. %>\fR delimiters will be interpreted as ruby code\. There are a few helper methods that you can use inside these delimiters see the next section titled \fIMODULEFILE HELPER METHODS\fR for details\.
.
.P
A more complicated modulefile may examine already loaded modules to determine which build to load\. For instance if the user has gcc or a gnu programming environment module loaded then your modulefile will want to load the gnu build\. Here is an example designed to dynamically set the build:
.
.IP "" 4
.
.nf

#%Module
proc ModulesHelp { } {
   puts stderr "<%= @package\.name %> <%= @package\.version %>"
   puts stderr ""
}
# One line description
module\-whatis "<%= @package\.name %> <%= @package\.version %>"

<% if @builds\.size > 1 %>
<%= module_build_list @package, @builds %>

set PREFIX <%= @package\.version_directory %>/$BUILD
<% else %>
set PREFIX <%= @package\.prefix %>
<% end %>

# Helpful ENV Vars
setenv <%= @package\.name\.upcase %>_DIR $PREFIX
setenv <%= @package\.name\.upcase %>_LIB "\-L$PREFIX/lib"
setenv <%= @package\.name\.upcase %>_INC "\-I$PREFIX/include"

# Common Paths
prepend\-path PATH            $PREFIX/bin
prepend\-path LD_LIBRARY_PATH $PREFIX/lib
prepend\-path MANPATH         $PREFIX/share/man
prepend\-path INFOPATH        $PREFIX/info
prepend\-path PKG_CONFIG_PATH $PREFIX/lib/pkgconfig
prepend\-path PYTHONPATH      $PREFIX/lib/python2\.7/site\-packages
prepend\-path PERL5PATH       $PREFIX/lib/perl5/site_perl
.
.fi
.
.IP "" 0
.
.P
The main difference from the first example is the \fB<%= if @builds\.size > 1 %>\fR block\. This basically checks to see if we have installed multiple builds or not\. If that condition is true everything up until the \fB<% else %>\fR will be put in the modulefile\. Otherwise, if we have only one build, \fBset PREFIX <%= @package\.prefix %>\fR will be put in the modulefile\.
.
.SS "def install"
\fBREQUIRED\fR \- This is the method that runs the software installation process\. It normally runs system commands, performs patches, and sets environment variables\. e\.g\.
.
.IP "" 4
.
.nf

def install
  system "\./configure"
  system "make"
  system "make install"
end
.
.fi
.
.IP "" 0
.
.P
The contents of the install method depends heavily on the software being installed\. For a list of additional helper methods for use inside install see the \fIFORMULA HELPER METHODS\fR section\.
.
.SH "MODULEFILE HELPER METHODS"
.
.SS "<code><%= @package\.name %></code>"
This will return the name of the application being installed\. It is the same as the APPLICATION part of the \fBsmithy formula install APPLICATION/VERSION/BUILD\fR command\.
.
.SS "<code><%= @package\.version %></code>"
Similar to the above, this returns the version number\.
.
.SS "<code><%= @package\.build_name %></code>"
Same as the name and version methods, this will return the build name of the applcation\.
.
.SS "<code><%= @package\.prefix %></code>"
This line will return the full prefix to an application\. If we run \fBsmithy formula install bzip2/1\.0\.4/pgi13\.4\fR and our software\-root is \fB/sw/xk6\fR this command will return \fB/sw/xk6/bzip2/1\.0\.4/pgi13\.4\fR
.
.SS "<code><%= @builds %></code>"
The \fB@builds\fR variable is an array of strings that contain the list of available builds for a given application\. Say we have a bzip2 formula and ran the following installs:
.
.IP "" 4
.
.nf

smithy formula install bzip2/1\.0\.4/gnu4\.3\.4
smithy formula install bzip2/1\.0\.4/gnu4\.7\.2
smithy formula install bzip2/1\.0\.4/pgi13\.4
smithy formula install bzip2/1\.0\.4/intel12
.
.fi
.
.IP "" 0
.
.P
The directory structure for the above builds would look like (assuming \fB/sw/xk6\fR is the software\-root):
.
.IP "" 4
.
.nf

/sw/xk6/bzip2/1\.0\.4
`\-\-\- modulefile
|  `\-\-\- bzip2
|     `\-\-\- 1\.0\.4
`\-\-\- gnu4\.3\.4
|  `\-\-\- bin
|  `\-\-\- include
|  `\-\-\- lib
|  `\-\-\- source
|  `\-\-\- share
`\-\-\- gnu4\.7\.2
|  `\-\-\- bin
|  `\-\-\- include
|  `\-\-\- lib
|  `\-\-\- source
|  `\-\-\- share
`\-\-\- pgi13\.4
|  `\-\-\- bin
|  `\-\-\- include
|  `\-\-\- lib
|  `\-\-\- source
|  `\-\-\- share
`\-\-\- intel12
   `\-\-\- bin
   `\-\-\- include
   `\-\-\- lib
   `\-\-\- source
   `\-\-\- share
.
.fi
.
.IP "" 0
.
.P
The \fB@builds\fR array would then be \fB[ "gnu4\.3\.4", "gnu4\.7\.2", "pgi13\.4", "intel12" ]\fR\. This lets you figure out what builds exist and use them in your modulefile\.
.
.SS "<code><%= @builds\.size %></code>"
size \fIhttp://ruby\-doc\.org/core\-2\.0/Array\.html#method\-i\-size\fR is a standard ruby method that counts the number of elements in an array\. For the above example this would return \fB4\fR\.
.
.SS "<code><%= module_build_list @package, @builds %></code>"
This is a helper method in smithy that will generate the tcl necessary to conditionally load builds based on what compiler programming environment modules a user has loaded\. It takes \fB@package\fR and \fB@builds\fR as arguments\. Using the above bzip2 example the result of using this method would be:
.
.IP "" 4
.
.nf

if [ is\-loaded PrgEnv\-gnu ] {
  if [ is\-loaded gcc/4\.3\.4 ] {
    set BUILD gnu4\.3\.4
  } elseif [ is\-loaded gcc/4\.7\.2 ] {
    set BUILD gnu4\.7\.2
  } else {
    set BUILD gnu4\.7\.2
  }
} elseif [ is\-loaded PrgEnv\-pgi ] {
  set BUILD pgi13\.4
} elseif [ is\-loaded PrgEnv\-intel ] {
  set BUILD intel12
} elseif [ is\-loaded PrgEnv\-cray ] {
  puts stderr "Not implemented for the cray compiler"
}
if {![info exists BUILD]} {
  puts stderr "[module\-info name] is only available for the following environments:"
  puts stderr "gnu4\.3\.4"
  puts stderr "gnu4\.7\.2"
  puts stderr "intel12"
  puts stderr "pgi13\.4"
  break
}
.
.fi
.
.IP "" 0
.
.SS "<code><% if \.\.\. %></code>"
This is standard erb ruby code\. Delimiters like \fB<% \.\.\. %>\fR do NOT put their results in the final modulefile, they are only used for control flow\. Delimiters with the extra = sign \fB<%= \.\.\. %>\fR will put their results in the final modulefile\.
.
.P
This is best used to conditionally render content to the modulefile and takes the form:
.
.IP "" 4
.
.nf

<% if @builds\.size > 1 %>
  \.\.\.
<% else %>
  \.\.\.
<% end %>
.
.fi
.
.IP "" 0
.
.P
Where \fB@builds\.size > 1\fR can be any expression which returns true or false\.
.
.SH "FORMULA HELPER METHODS"
These methods are designed to be used within the \fBinstall\fR method of a formula file\.
.
.SS "name"
.
.SS "version"
.
.SS "build_name"
.
.SS "prefix"
.
.SS "module_list"
.
.SS "patch"
.
.SS "system"
.
.SH "COMMON OPERATIONS"
.
.SS "Setting Environment Variables"
.
.SS "Creating Files"
.
.SH "SEE ALSO"
smithy(1)
