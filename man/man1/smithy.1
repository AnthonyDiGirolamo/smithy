.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "SMITHY" "1" "August 2013" "" ""
.
.SH "NAME"
\fBsmithy\fR \- build, test, and install software with ease
.
.SH "SYNOPSIS"
\fBsmithy\fR \fBnew\fR APPLICATION/VERSION/BUILD
.
.br
\fBsmithy\fR \fBedit\fR APPLICATION/VERSION/BUILD
.
.br
\fBsmithy\fR \fBbuild\fR APPLICATION/VERSION/BUILD
.
.br
\fBsmithy\fR \fBformula install\fR APPLICATION/VERSION/BUILD
.
.br
.
.SH "DESCRIPTION"
\fBsmithy\fR is a command line software installation tool that borrows ideas heavily from the excellent homebrew \fIhttp://brew\.sh/\fR package management system for Mac OS X and SWTools \fIhttp://www\.olcf\.ornl\.gov/center\-projects/swtools/\fR\.
.
.P
This is still a work in progress\. If you have any questions, suggestions, or encounter any errors please open an issue on github at \fIhttps://github\.com/AnthonyDiGirolamo/smithy/issues\fR\.
.
.SH "COMMAND LINE HELP"
For help on all options and commands run \fBsmithy help\fR
.
.br
For help on a specific command run \fBsmithy help COMMAND\fR or \fBsmithy help COMMAND SUBCOMMAND\fR
.
.SH "SOFTWARE INSTALLATION METHODS"
There are two ways of installing software using smithy:
.
.IP "\(bu" 4
\fBbuild scripts\fR (similar to swtools)
.
.IP "\(bu" 4
\fBformulas\fR (similar to homebrew)
.
.IP "" 0
.
.SH "BUILD SCRIPTS"
Build scripts are shell scripts that live inside of a package\'s PREFIX and execute the steps required to perform the compilation\. A hierarchy might look something like this:
.
.IP "" 4
.
.nf

/sw/xk6/subversion/1\.6\.17
`\-\-\- sles11\.1_gnu4\.3\.4
   `\-\-\- bin
   `\-\-\- build\-notes
   `\-\-\- dependencies
   `\-\-\- include
   `\-\-\- lib
   `\-\-\- rebuild
   `\-\-\- relink
   `\-\-\- remodule
   `\-\-\- retest
   `\-\-\- share
   `\-\-\- subversion\-1\.6\.17
.
.fi
.
.IP "" 0
.
.P
The prefix for the above package is \fB/sw/xk6/subversion/1\.6\.17/sles11\.1_gnu4\.3\.4\fR within this directory you can see the usual \fBbin/include/lib/share\fR folders\. Additionally there is the source directory \fBsubversion\-1\.6\.17\fR and three build scripts \fBrebuild\fR, \fBrelink\fR, and \fBremodule\fR\. The \fBrebuild\fR script will compile the software and set the prefix while the remodule script sets up the environment including loading modulefiles\.
.
.SH "FORMULAS"
The Problem with build scripts is that they are duplicated for every software installation\. This makes installing new software difficult because you will have to go back and look at old ones and copy relevant steps to a new rebuild script\. So much for don\'t repeat yourself!
.
.P
An alternative is to use formulas\. This idea is heavily borrowed from the wonderful homebrew \fIhttp://brew\.sh/\fR package management system for Mac OS X\. With a formula you can specify the modules to load, extra package dependencies, installation steps, and the modulefile in a single file\. The formulas are written in ruby and can be as flexible and dynamic as you like\.
.
.P
A package installed with a formula has a simpler prefix directory structure\. The only addition is the source files under the source directory\.
.
.IP "" 4
.
.nf

/sw/xk6/subversion/1\.7\.8
`\-\-\- sles11\.1_gnu4\.3\.4
   `\-\-\- bin
   `\-\-\- include
   `\-\-\- lib
   `\-\-\- source
   `\-\-\- share
.
.fi
.
.IP "" 0
.
.SH "NAMING SOFTWARE BUILDS"
All software builds have the following name format: \fBAPPLICATION/VERSION/BUILD\fR That is three different parts separated by forward slashes \fB/\fR Each part consists of:
.
.SS "APPLICATION"
The name using lowercase characters
.
.SS "VERSION"
Numbers with periods\. I recommend that whatever you choose as a version allows it to be lexigraphically sorted from oldest to newest\. For example use 2013\-02\-14 instead of Feb14\-2013\.
.
.SS "BUILD"
Build is somewhat different, it consists of the intended operating system and compiler separated by underscores \fB_\fR\. It is important to use compiler version numbers that correspond to module versions\. This will allow smithy to auto\-generate modulefiles for software with multiple builds\.
.
.P
\fBsles11\.1_gnu4\.6\.2\fR corresponds to SuSE Linux Enterprise Server 11\.1 and the GNU gcc compiler 4\.6\.2
.
.P
\fBcle4\.0_pgi12\.1\.0\fR corresponds to Cray Linux Environment 4\.0 and the PGI 12\.1\.0 compile
.
.P
You may also add any other details relevant to the build\. For instance, add python2\.7 to the build name of a python module compiled for python2\.7 and python3\.3 for python3\.3\.
.
.SH "INSTALLATIONS WITH FORMULAS"
For details on writing formulas please see the smithyformula(5) man page\. This section covers only how to install software using existing formulas\.
.
.P
Smithy formula sub\-commands include:
.
.TP
\fBnew\fR
Create a new formula
.
.TP
\fBlist\fR
List known formulas
.
.TP
\fBwhich\fR
Display a formula location
.
.TP
\fBdisplay\fR
Display a formula
.
.TP
\fBinstall\fR
Install a package using a formula
.
.TP
\fBcreate_modulefile\fR
Create a modulefile for a given package
.
.P
Once a formula has been written installing is straightforward using the install command\. For example to install subversion to your software root under the \fBsubversion/1\.7\.8/sles11\.1_gnu4\.3\.4\fR directory you might run:
.
.IP "" 4
.
.nf

smithy formula install subversion/1\.7\.8/sles11\.1_gnu4\.3\.4
.
.fi
.
.IP "" 0
.
.P
See \fINAMING SOFTWARE BUILDS\fR for details on naming a software build\. The format of the install sub\-command is: \fBsmithy formula install [command options] APPLICATION | APPLICATION/VERSION | APPLICATION/VERSION/BUILD\fR\. The options and arguments include:
.
.TP
\fB\-\-[no\-]clean\fR
This will delete all existing files in the target directory before performing the installation\.
.
.TP
\fB\-\-formula\-name\fR
By default smithy will guess the formula name based on the target directory APPLICATION/VERSION/BUILD argument\. You may wish you install to a location named differently than a formula\. In this case, use \fB\-\-formula\-name\fR to define which formula to use\.
.
.TP
\fBAPPLICATION | APPLICATION/VERSION | APPLICATION/VERSION/BUILD\fR
This is the destination directory that the software will be installed in\. If you omit the BUILD or VERSION/BUILD directories smithy will try to guess the version based on the formula, and the build based on the operating system and version of gcc available\. If in doubt, specify the full destination\.
.
.P
Assuming we install subversion with the previous command and our software\-root is \fB/sw/xk6/\fR the finished directory structure would look like:
.
.IP "" 4
.
.nf

/sw/xk6/subversion/1\.7\.8
`\-\-\- modulefile
|  `\-\-\- subversion
|     `\-\-\- 1\.7\.8
`\-\-\- sles11\.1_gnu4\.3\.4
   `\-\-\- bin
   `\-\-\- include
   `\-\-\- lib
   `\-\-\- source
   `\-\-\- share
.
.fi
.
.IP "" 0
.
.P
A \fBmodulefile\fR folder will be created alongside the \fBsles11\.1_gnu4\.3\.4\fR build directory so that the modulefile can be tested\. To test the modulefile you need to add the modulefile folder to the \fB$MODULEPATH\fR environment variable\. Running any of the following will do this:
.
.IP "" 4
.
.nf

smithy module use last
smithy module use subversion/1\.7\.8/sles11\.1_gnu4\.3\.4
module use /sw/xk6/subversion/1\.7\.8/modulefile/subversion
.
.fi
.
.IP "" 0
.
.P
\fBlast\fR is an alias to the last software build smithy worked on\. \fBsmithy show last\fR will display the last build you worked on\.
.
.P
Once loaded, you should be able to interact with the new module file as normal using:
.
.IP "" 4
.
.nf

module avail subversion/1\.7\.8
module display subversion/1\.7\.8
module load subversion/1\.7\.8
.
.fi
.
.IP "" 0
.
.P
You can now deploy the module to make it available to other users\. This should be done once you\'re confident the modulefile is working properly\. To do so run either:
.
.IP "" 4
.
.nf

smithy module deploy last
smithy module deploy subversion/1\.7\.8/sles11\.1_gnu4\.3\.4
.
.fi
.
.IP "" 0
.
.SH "INSTALLATIONS WITH BUILD SCRIPTS"
This section shows the typical work\-flow for adding a new software build using build scripts\. Let\'s imagine we want to install petsc 3\.2 using the cray compiler\. We must create a place for the software build, build it, and create a module\.
.
.SS "1\. Creating The Build"
Let\'s use \fBpetsc/3\.2/cle4\.0_cray8\.0\.1\fR as the name for our new package\. See \fINAMING SOFTWARE BUILDS\fR for details on naming a software build\. This would be petsc designed to run on a cle4\.0 compute node and compiled with the cray cce 8\.0\.1 compiler\. This can be accomplished by running:
.
.IP "" 4
.
.nf

smithy new petsc/3\.2/cle4\.0_cray8\.0\.1
.
.fi
.
.IP "" 0
.
.P
You can save yourself some extra time by telling smithy where the source tar file for petsc is:
.
.IP "" 4
.
.nf

smithy new \-t petsc\-3\.2\-p7\.tar\.gz petsc/3\.2/cle4\.0_cray8\.0\.1
.
.fi
.
.IP "" 0
.
.P
When using the \fB\-t\fR, \fB\-\-tarfile=\fR option smithy will extract the given archive to the \fBsource\fR directory\. For the petsc example above this would be \fB/sw/xk6/petsc/3\.2/cle4\.0_cray8\.0\.1/source\fR
.
.P
The \fB\-t\fR option can also download an archive from a given URL\. The archive is saved along side the source directory\. As an example:
.
.IP "" 4
.
.nf

smithy new \-t http://ftp\.mcs\.anl\.gov/pub/petsc/release\-snapshots/petsc\-3\.2\-p7\.tar\.gz petsc/3\.2/cle4\.0_cray8\.0\.1
.
.fi
.
.IP "" 0
.
.P
This command will download petsc\-3\.2\-p7\.tar\.gz, save it to \fB/sw/xk6/petsc/3\.2/cle4\.0_cray8\.0\.1/petsc\-3\.2\-p7\.tar\.gz\fR and extract it to \fB/sw/xk6/petsc/3\.2/cle4\.0_cray8\.0\.1/source\fR\. This feature requires the \fBcurl\fR command to work properly\.
.
.P
Additionally, if this is a brand new piece of software add the \fB\-\-web\-description\fR switch\. This will create the application description files too\.
.
.SS "2\. Editing and Building the Software"
Once you have created the build you may need to update the build (\fBrebuild\fR) and environment (\fBremodule\fR) scripts before building the software\. Both files live within the software prefix\. For our example it is located in \fB/sw/xk6/petsc/3\.2/cle4\.0_cray8\.0\.1\fR\. You can edit this and other related files using the \fBedit\fR command:
.
.IP "" 4
.
.nf

smithy edit build petsc/3\.2/cle4\.0_cray8\.0\.1
.
.fi
.
.IP "" 0
.
.P
This is just a convenience command to editing the rebuild script\. It will expect the \fB$EDITOR\fR environment variable to be set to the edior of your choice\. You can alternatively use the \fB\-e\fR,\fB\-\-editor=\fR option\. To make things quicker you can run:
.
.IP "" 4
.
.nf

smithy edit last
.
.fi
.
.IP "" 0
.
.P
By omitting the build argument, smithy will prompt you to select the file to edit\. The \fBlast\fR argument will tell smithy to use the last software build it worked with\. If you are not sure what the last one is you can run \fBsmithy show last\fR to see\.
.
.P
Once you have edited the files, it\'s time to build\. Do so by running:
.
.IP "" 4
.
.nf

smithy build last
.
.fi
.
.IP "" 0
.
.P
The results of the run will be shown on the screen and simultaneously logged to \fBbuild\.log\fR withing the software prefix folder\.
.
.SS "3\. Create and edit a modulefile"
This step is best done after all builds for a particular application have been created\. When you create a new software build a modulefile is created too\. For our petsc install it lives in: \fB/sw/xk6/petsc/3\.2/modulefile\fR All builds of a particular application share a single modulefile\.
.
.P
Smithy does some guessing as to what should be inside the modulefile based on what builds you have\. If there is only one build the modulefile is relatively simple\. If you have multiple builds for different compilers then it will be more complicated\.
.
.P
To be sure the modulefile is up to date on each build, regenerate it with:
.
.IP "" 4
.
.nf

smithy module create last
.
.fi
.
.IP "" 0
.
.P
Launch your editor with:
.
.IP "" 4
.
.nf

smithy edit modulefile last
.
.fi
.
.IP "" 0
.
.P
Add any relevant variables to your application\. Next you will need to test it to make sure it is loading properly for each build and that there are no errors\. You can add the modulefile to your \fB$MODULEPATH\fR using:
.
.IP "" 4
.
.nf

smithy module use last
.
.fi
.
.IP "" 0
.
.P
Now you are free to display and load it using the normal module commands:
.
.IP "" 4
.
.nf

module avail      petsc
module display    petsc/3\.2
module load       petsc/3\.2
.
.fi
.
.IP "" 0
.
.P
Once the modulefile is ready, you can copy it into place using:
.
.IP "" 4
.
.nf

smithy module deploy last
.
.fi
.
.IP "" 0
.
.P
For out petsc example, this command will copy \fB/sw/xk6/petsc/3\.2/modulefile/petsc/3\.2\fR to \fB/sw/xk6/modulefiles/petsc/3\.2\fR
.
.SS "4\. Website Description"
If this is a new application you will need to add some information to the description file\. For petsc this lives in: \fB/sw/xk6/petsc/description\fR This is an html formatted file\. Alternatively, it can live in \fB/sw/xk6/petsc/description\.markdown\fR this file is in markdown format and is a bit simpler to write than html\. See \fIhttp://kramdown\.rubyforge\.org/quickref\.html\fR for more information on markdown syntax\. If both files exist, the markdown file takes precedence\.
.
.P
If the description file is missing you can generate one by running:
.
.IP "" 4
.
.nf

smithy repair last
.
.fi
.
.IP "" 0
.
.P
To publish to the website run:
.
.IP "" 4
.
.nf

smithy publish petsc
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
smithyformula(5)
