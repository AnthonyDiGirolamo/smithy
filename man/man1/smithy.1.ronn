smithy(1) -- build, test, and install software with ease
========================================================

## SYNOPSIS

`smithy` `new` APPLICATION/VERSION/BUILD<br>
`smithy` `edit` last<br>
`smithy` `build` last<br>
`smithy` `formula install` APPLICATION/VERSION/BUILD<br>

## DESCRIPTION

`smithy` will help you get software installed quickly and painlessly. This tool
follows all the same conventions as
[SWTools](http://www.olcf.ornl.gov/center-projects/swtools/). That is, directory
structures, support files, and scripts are all in the same locations.  Smithy's
goal is to make using those conventions easier and provide new ways of
installing software.

This is still a work in progress. If you have any questions, suggestions, or
encounter any errors please open an issue on github at
[https://github.com/AnthonyDiGirolamo/smithy/issues](https://github.com/AnthonyDiGirolamo/smithy/issues).

## COMMANDS

For help on all options and commands run `smithy help`. For help on a specific
command run `smithy help COMMAND` or `smithy help COMMAND SUBCOMMAND`.

## SYNOPSIS

There are two ways of installing software using smithy:

* build scripts
* formulas

### BUILD SCRIPTS

Build scripts are shell scripts that live inside of a package's PREFIX and
execute the steps required to perform the compilation. A hierarchy might look
something like this:

    /sw/xk6/subversion/1.6.17
    `--- sles11.1_gnu4.3.4
       `--- bin
       `--- build-notes
       `--- dependencies
       `--- include
       `--- lib
       `--- rebuild
       `--- relink
       `--- remodule
       `--- retest
       `--- share
       `--- subversion-1.6.17

The prefix for the above package is
`/sw/xk6/subversion/1.6.17/sles11.1_gnu4.3.4` within this directory you can see
the usual `bin/include/lib/share` folders. Additionally there is the source
directory `subversion-1.6.17` and three build scripts `rebuild`, `relink`, and
`remodule`. The `rebuild` script will compile the software and set the prefix
while the remodule script sets up the environment including loading modulefiles.

### FORMULAS

The Problem with build scripts is that they are duplicated for every software
installation. This makes installing new software difficult because you will have
to go back and look at old ones and copy relevant steps to a new rebuild script.
So much for don't repeat yourself!

An alternative is to use formulas. This idea is heavily borrowed from the
wonderful [homebrew](http://brew.sh/) package management system for Mac OS X.
With a formula you can specify the modules to load, extra package dependencies,
installation steps, and the modulefile in a single file. The formulas are
written in ruby and can be as flexible and dynamic as you like.

A package installed with a formula has a simpler prefix directory structure.
The only addition is the source files under the source directory.

    /sw/xk6/subversion/1.7.8
    `--- sles11.1_gnu4.3.4
       `--- bin
       `--- include
       `--- lib
       `--- source
       `--- share

## EXAMPLES

### INSTALLATIONS WITH FORMULAS

For details on writing formulas please see the smithyformula(5) man page.

Smithy formula sub-commands include:

* `new`:
  Create a new formula
* `list`:
  List known formulas
* `which`:
  Display a formula location
* `display`:
  Display a formula
* `install`:
  Install a package using a formula
* `create_modulefile`:
  Create a modulefile for a given package

Once a formula has been written installing is straightforward using the install
command. For example to install subversion to your software root under the
`subversion/1.7.8/sles11.1_gnu4.3.4` directory you might run:

    smithy formula install subversion/1.7.8/sles11.1_gnu4.3.4

The format of the install sub-command is: `smithy formula install [command
options] NAME | NAME/VERSION | NAME/VERSION/BUILD`. The options and arguments
include:

* `--[no-]clean`:
  This will delete all existing files in the target directory before performing
  the installation.
* `--formula-name`:
  By default smithy will guess the formula name based on the target directory
  NAME/VERSION/BUILD argument. You may wish you install to a location named
  differently than a formula. In this case, use `--formula-name` to define
  which formula to use.
* `NAME | NAME/VERSION | NAME/VERSION/BUILD`:
  This is the destination directory that the software will be installed in. If
  you omit the BUILD or VERSION/BUILD directories smithy will try to guess the
  version based on the formula, and the build based on the operating system and
  version of gcc available. If in doubt, specify the full destination.

### INSTALLATIONS WITH BUILD SCRIPTS

This section shows the typical work-flow for adding a new software build using
build scripts. Let's imagine we want to install petsc 3.2 using the cray
compiler. We must create a place for the software build, build it, and create a
module.

Note: all commands, options, and arguments have tab-completion when using bash or zsh

_1. Creating The Build_

All software builds have the following name format: **APPLICATION/VERSION/BUILD**
That is three different parts separated by forward slashes `/` Each part consists of:

  * **APPLICATION**:
    The name using lowercase characters

  * **VERSION**:
    Numbers with periods. I recommend that whatever you choose as a version
    allows it to be lexigraphically sorted from oldest to newest.

  * **BUILD**:
    Build is somewhat different, it consists of the intended operating system
    and compiler separated by underscores `_`. It is important to use compiler
    version numbers that correspond to module versions. This will allow smithy
    to auto-generate modulefiles for software with multiple builds. As an
    example:

`sles11.1_gnu4.6.2` corresponds to SuSE Linux Enterprise Server 11.1 and the GNU gcc compiler 4.6.2

`cle4.0_pgi12.1.0` corresponds to Cray Linux Environment 4.0 and the PGI 12.1.0 compile

Let's use `petsc/3.2/cle4.0_cray8.0.1` as the name. This would be petsc designed
to run on a cle4.0 compute node and compiled with the cray cce 8.0.1 compiler.
This can be accomplished by running:

    smithy new petsc/3.2/cle4.0_cray8.0.1

You can save yourself some extra time by telling smithy where the source tar file for
petsc is:

    smithy new -t petsc-3.2-p7.tar.gz petsc/3.2/cle4.0_cray8.0.1

When using the `-t`, `--tarfile=` option smithy will extract the given archive
to the `source` directory. For the petsc example above this would be
`/sw/xk6/petsc/3.2/cle4.0_cray8.0.1/source`

The `-t` option can also download an archive from a given URL. The archive is
saved along side the source directory. As an example:

    smithy new -t http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.2-p7.tar.gz petsc/3.2/cle4.0_cray8.0.1

This command will download petsc-3.2-p7.tar.gz, save it to
`/sw/xk6/petsc/3.2/cle4.0_cray8.0.1/petsc-3.2-p7.tar.gz` and extract it to
`/sw/xk6/petsc/3.2/cle4.0_cray8.0.1/source`. This feature requires the `curl`
command to work properly.

Additionally, if this is a brand new piece of software add the
`--web-description` switch. This will create the application description files
too.

_2. Editing and Building the Software_

Once you have created the build you may need to update the build (`rebuild`) and
environment (`remodule`) scripts before building the software. Both files live
within the software prefix. For our example it is located in
`/sw/xk6/petsc/3.2/cle4.0_cray8.0.1`. You can edit this and other related files
using the `edit` command:

    smithy edit build petsc/3.2/cle4.0_cray8.0.1

This is just a convenience command to editing the rebuild script. It will expect
the `$EDITOR` environment variable to be set to the edior of your choice. You
can alternatively use the `-e`,`--editor=` option. To make things quicker you
can run:

    smithy edit last

By omitting the build argument, smithy will prompt you to select the file to
edit.  The `last` argument will tell smithy to use the last software build it
worked with. If you are not sure what the last one is you can run `smithy show
last` to see.

Once you have edited the files, it's time to build. Do so by running:

    smithy build last

The results of the run will be shown on the screen and simultaneously logged to
`build.log` withing the software prefix folder.

_3. Create and edit a modulefile_

This step is best done after all builds for a particular application have been
created.  When you create a new software build a modulefile is created too.  For
our petsc install it lives in: `/sw/xk6/petsc/3.2/modulefile` All builds of a
particular application share a single modulefile.

Smithy does some guessing as to what should be inside the modulefile based on
what builds you have. If there is only one build the modulefile is relatively
simple. If you have multiple builds for different compilers then it will be more
complicated.

To be sure the modulefile is up to date on each build, regenerate it with:

    smithy module create last

Launch your editor with:

    smithy edit modulefile last

Add any relevant variables to your application. Next you will need to test it to
make sure it is loading properly for each build and that there are no errors.
You can add the modulefile to your `$MODULEPATH` using:

    smithy module use last

Now you are free to display and load it using the normal module commands:

    module avail      petsc
    module display    petsc/3.2
    module load       petsc/3.2

Once the modulefile is ready, you can copy it into place using:

    smithy module deploy last

For out petsc example, this command will copy
`/sw/xk6/petsc/3.2/modulefile/petsc/3.2` to `/sw/xk6/modulefiles/petsc/3.2`

_4. Website Description_

If this is a new application you will need to add some information to the
description file. For petsc this lives in: `/sw/xk6/petsc/description` This is
an html formatted file.  Alternatively, it can live in
`/sw/xk6/petsc/description.markdown` this file is in markdown format and is a
bit simpler to write than html. See [http://kramdown.rubyforge.org/quickref.html](http://kramdown.rubyforge.org/quickref.html)
for more information on markdown syntax. If both files exist, the markdown file
takes precedence.

If the description file is missing you can generate one by running:

    smithy repair last

To publish to the website run:

    smithy publish petsc

## LICENSE

Smithy is freely available under the terms of the BSD license given below.

Copyright (c) 2012. UT-BATTELLE, LLC. All rights reserved.

Produced by the National Center for Computational Sciences at Oak Ridge National
Laboratory. Smithy is a based on SWTools, more information on SWTools can be
found at: [http://www.olcf.ornl.gov/center-projects/swtools/](http://www.olcf.ornl.gov/center-projects/swtools/)

This product includes software produced by UT-Battelle, LLC under Contract No.
DE-AC05-00OR22725 with the Department of Energy.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.

* Neither the name of the UT-BATTELLE nor the names of its contributors may
  be used to endorse or promote products derived from this software without
  specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

