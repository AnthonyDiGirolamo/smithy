#compdef smithy

_smithy_packages() {
	packages=(`smithy search --format=name`)
}

_smithy_formulas() {
	formulas=(`smithy formula list`)
}

_smithy_architectures() {
	arches=(`smithy show arch --all`)
  _wanted packages expl 'architectures' compadd -a arches
}

local -a _1st_arguments
_1st_arguments=(
  'build:Build software'
  'edit:Edit package support files'
  'formula:Install software from predefined formulas'
  'help:Shows a list of commands or help for one command'
  'module:Manage modulefiles for a package'
  'new:Generate a new build and all necessary files'
  'publish:Publish packages to web'
  'repair:Repair a package'
  'search:Search currently installed software'
  'show:Display internal smithy values'
  'test:Test software'
)

local expl
local -a formulae

_arguments \
  '(--arch=)--arch=[Machine architecture to operate on]:architecture:_smithy_architectures' \
  '(--no-color)--no-color[Disable colored output]' \
  '(--color)--color[Enable colored output]' \
  '(--config-file=)--config-file=[Alternate config file]:file:_files' \
  '(--descriptions-root=)--descriptions-root=[The root level directory for global description files]:directory:_files -/' \
  '(--disable-group-writeable)--disable-group-writeable[Disable group writable file creation]' \
  '(-f --force)'{-f,--force}'[Always overwrite existing files]' \
  '(--file-group-name=)--file-group-name=[Group name for files created by smithy]' \
  '(--help)--help[Show help]' \
  '(--prgenv-prefix=)--prgenv-prefix=[The prefix of programming environments for this machine]' \
  '(--software-root=)--software-root=[The root level directory for software]:directory:_files -/' \
  '(-v --verbose)'{-v,--verbose}'[Be more verbose]' \
  '(--web-root=)--web-root=[The root level directory for web files]:directory:_files -/' \
  '*:: :->subcmds' && return 0
#[[ "$PREFIX" = --* ]] && _arguments -- \
  #'*=FILE*:file:_files' \
  #'*=PATH*:directory:_files -/' \
  #'*=NAME*:directory:_files -/' && return 0

# Match Sub-command
if (( CURRENT == 1 )); then
	_describe -t commands "smithy subcommand" _1st_arguments
	return
fi

echo $words >/dev/ttys004
echo $CURRENT >/dev/ttys004

# completion for each sub command
case "$words[1]" in
  help)
    _describe -t commands "smithy subcommand" _1st_arguments
    ;;

  build|test)
    _arguments \
      '(--disable-log)--disable-log[Disable logging]' \
      '(-f --force)'{-f,--force}'[Ignore .lock file and run anyway]' \
      '(--log-name=)--log-name=[Log file name located within the software prefix]:file:_files' \
      '(-n --dry-run)'{-n,--dry-run}'[See what scripts will be run without running them]' \
      '(-s --suppress-stdout)'{-s,--suppress-stdout}'[Suppress messages from STDOUT.]' \
      '1: :->forms' &&  return 0

    if [[ "$state" == forms ]]; then
      _smithy_packages
      _wanted packages expl 'packages' compadd -a packages
    fi
    ;;

  edit)
    _subsub_commands=(
      'build:Edit a build script'
      'test:Edit a test script'
      'env:Edit modules loaded for the build script'
      'modulefile:Edit modulefile'
    )
    # Match subsub-command
    if (( CURRENT == 2 )); then
      _describe -t subcommands "edit subcommand" _subsub_commands
      return
    fi

    _arguments \
      '(-e --editor=)'{-e,--editor=}'[Editor for opening script files]:file:_files' \
      '(-s --split)'{-s,--split}'[Split editing window with requested file and the environment (remodule) file]' \
      '2: :->forms' &&  return 0

    if [[ "$state" == forms ]]; then
      _smithy_packages
      _wanted packages expl 'packages' compadd -a packages
    fi
    ;;

  module)
    _subsub_commands=(
      'create:Generate a modulefile for a given package'
      'deploy:Copy a modulefile to the system MODULEPATH'
      'edit:Alias for "smithy edit modulefile"'
      'use:Add a modulefile to the MODULEPATH'
    )
    # Match subsub-command
    if (( CURRENT == 2 )); then
      _describe -t subcommands "edit subcommand" _subsub_commands
      return
    fi

    _arguments \
      '(-n --dry-run)'{-n,--dry-run}'[See what files will be created without creating them]' \
      '1: :->forms' &&  return 0

    if [[ "$state" == forms ]]; then
      _smithy_packages
      _wanted packages expl 'packages' compadd -a packages
    fi
    ;;

  new)
    _arguments \
      '(--existing-scripts)--existing-scripts[Use an existing softwares build scripts]' \
      '(--skip-modulefile)--skip-modulefile[Skip modulefile generation]' \
      '(--web-description)--web-description[Create description file for website]' \
      '(-n --dry-run)'{-n,--dry-run}'[See what files will be created without creating them]' \
      '(-t --tarball=)'{-t,--tarball=}'[Provide a source tarball to unpack (optional)]:file:_files'
    ;;

  repair)
    _arguments \
      '(-n --dry-run)'{-n,--dry-run}'[Verify permissions only]' \
      '1: :->forms' &&  return 0

    if [[ "$state" == forms ]]; then
      _smithy_packages
      _wanted packages expl 'packages' compadd -a packages
    fi
    ;;

  search)
    _arguments \
      '(--format=)--format=[Format of the output]:format:(path name table csv dokuwiki)'
    ;;

  show)
    _subsub_commands=(
      'arch:List all architectures know to smithy.'
      'example_config:Display an example config file.'
      'last:Display the package name used in the last smithy command. This is stored in the ~/.smithyrc file.'
    )
    # Match subsub-command
    if (( CURRENT == 2 )); then
      _describe -t subcommands "show subcommand" _subsub_commands
      return
    fi
    ;;

  publish)
    _arguments \
      '(-n --dry-run)'{-n,--dry-run}'[See what files will be created without creating them]' \
      '1: :->forms' &&  return 0

    if [[ "$state" == forms ]]; then
      _smithy_packages
      _wanted packages expl 'packages' compadd -a packages
    fi
    ;;

  formula)
    echo $words[$CURRENT] > /dev/ttys004

    _subsub_commands=(
      'create_modulefile:Create a modulefile for a given package'
      'display:Display a formula'
      'install:Install a package using a formula'
      'list:List known formulas'
      'new:Create a new formula'
      'which:Display a formula location'
    )

    # not sure how to make this work right
    # _arguments \
    #   '(-d --directories=)'{-d,--directories=}'[Specify one or more additional formula directories separated with commas]:directory:_files -/' \
    #   '1: :->forms' &&  return 0

    # Match subsub-command
    if (( CURRENT == 2 )); then
      _describe -t subcommands "formula subcommand" _subsub_commands
      return
    fi

    # Match subsub-command arguments
    if (( CURRENT == 3 )); then
      case "$words[2]" in
        install)
          _arguments \
            '(--clean)--clean[clean existing install prefix]' \
            '(--no-clean)--no-clean[leave existing install prefix files intact]' \
            '(-f --formula-name)'{-f,--formula-name}'[Formula name]' \
            '(-m --modulefile)'{-m,--modulefile}'[Create modulefiles as well]' \
            '1: :->forms' &&  return 0
          if [[ "$state" == forms ]]; then
            _smithy_formulas
            _wanted packages expl 'formulas' compadd -a formulas
          fi
          ;;
      esac

      return
    fi

    ;;
esac
