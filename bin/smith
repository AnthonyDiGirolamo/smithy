#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end

# Add the lib dir to the ruby library search path
@smithy_bin_root = File.expand_path(File.dirname(File.realpath(__FILE__))+ '/../')
$: << File.expand_path(@smithy_bin_root + '/lib')

require 'rubygems'
require 'gli'
require 'English'
require 'open4'
require 'rainbow'
require 'smithy'
require 'terminal-table'

include GLI
include Smithy

version Smithy::VERSION
@smithy_config_file = 'etc/smithyrc'
# GLI Config file method - Unnecessary
# config_file File.expand_path(File.join(@smithy_bin_root,@smithy_config_file))

program_desc 'Smithy will help you build, test, and distribute software with ease.'

desc "Machine architecure to operate on (default defined in: #{@smithy_bin_root}/#{@smithy_config_file})"
arg_name 'NAME'
default_value nil
flag [:arch]

desc 'The root level directory for software'
default_value '/sw'
arg_name 'PATH'
flag ['software-root']

desc "Don't use colors"
switch 'no-color'

desc 'Search currently installed software'
arg_name 'name'
command ['search','s'] do |c|
  output_formats = {
    'path'  => Smithy::Format::Path.new,
    'name'  => Smithy::Format::Name.new,
    'table' => Smithy::Format::Table.new,
    'csv'   => Smithy::Format::CSV.new
  }
  c.desc 'Format of the output'
  c.arg_name output_formats.keys.join('|')
  c.default_value output_formats.keys.first
  c.flag :format

  c.action do |global_options,options,args|
    formatter = output_formats[options[:format]]

    notice "Searching in #{global_options[:full_software_root_path]}"

    # Array of full paths to rebuild scripts
    software = Dir.glob(global_options[:full_software_root_path]+"/*/*/*/rebuild").sort
    software.collect!{|s| s.gsub(/\/rebuild$/, '')}
    software.sort!

    count = 0
    formatter.before
    if args.empty?
      formatter.format(software, global_options[:full_software_root_path])
      count += software.count
    else
      args.each do |a|
        result = software.select { |s| s =~ /#{a}/ }
        formatter.format(result, global_options[:full_software_root_path])
        count += result.count
      end
    end
    formatter.after

    notice "#{count} Found"
  end
end

desc 'Build software'
long_desc "The software to build may be either the absolute path or the full name of the software. The full name includes version numbers and build names using the format: NAME/VERSION/BUILD."
arg_name 'PATH'
command ['build','b'] do |c|
  c.desc 'Build log file name located within the software prefix.'
  c.arg_name 'FILE'
  c.default_value 'build.log'
  c.flag ["build-log-name"]

  c.desc "Disable build logging"
  c.switch ["disable-build-log"]

  c.desc 'Send messages from underlying commands (configure, make, etc) to STDOUT.'
  c.switch [:s, "send-to-stdout"]

  c.desc 'See what packages will be built but without building them'
  c.switch [:n, "dry-run"]

  c.action do |global_options,options,args|
    if args.empty?
      notice "Reading package names from STDIN..."
      packages = STDIN.readlines.map{|p| p.chomp}
    else
      packages = args
    end

    raise "You must supply at least one package to build" if packages.empty?

    packages.each do |package|
      p = Package.new(
        :root => global_options[:"software-root"],
        :arch => global_options[:arch],
        :path => package)

      if p.valid?
        p.run_rebuild_script(
          :disable_logging => options[:"disable-build-log"],
          :build_log_name  => options[:"build-log-name"],
          :dry_run         => options[:"dry-run"],
          :send_to_stdout  => options[:"send-to-stdout"],
          :file_group      => global_options[:"file-group-id"],
          :file_mask       => global_options[:"file-bit-mask"])
      end
    end
  end
end

desc 'Generate a new package and all necessary files'
# long_desc """The new command will create all necessary files needed to add a new software package. Some care should be given to naming new packages. Some considerations are package names, version numbers, and build names. New package names should be of the format NAME/VERSION/BUILD
#
# NAME of the package should be all lower case and one word. If multiple words are necessary separate them with dashes '-'.
#
# VERSION numbers should be standard numbers separated by periods. If another format is necessary ensure that the numbers can be lexigraphically sorted in order of oldest release to newest.
#
# BUILD names should consist of two pieces of information separated by an underscore '_', the package's intended operating system and compiler.
#
# EXAMPLES:
#
# silo/4.8/sles11.1_gnu4.5.3
# fftw/3.2.2/cle4.0_pgi11.10.0"""
arg_name 'NAME'
command :new do |c|
  c.desc "See what files will be created when running new without creating them."
  c.switch [:n, "dry-run"]
  c.desc "Provide a source tarball to unpack (optional)"
  c.arg_name "FILE"
  c.flag [:t, :tarball]

  c.action do |global_options,options,args|
    raise "You must supply a name to create new packages" if args.empty?

    p = Package.new(
      :root => global_options[:"software-root"],
      :arch => global_options[:arch],
      :path => args.first)

    if p.valid?
      p.create(
        :dry_run     => options[:"dry-run"],
        :smithy_root => @smithy_bin_root,
        :file_group  => global_options[:"file-group-name"],
        :file_mask   => global_options[:"file-bit-mask"])
    end
  end
end

#desc 'Describe copy here'
#arg_name 'Describe arguments to copy here'
#command :copy do |c|
  #c.action do |global_options,options,args|
  #end
#end

pre do |global,command,options,args|
  # Load and merge the system config values with command line values
  # If an option is on the command line it is used instead
  global.merge! load_system_config(global) do |key, values_command_line, values_config|
    if values_command_line.nil?
      values_config
    else
      values_command_line
    end
  end

  if global[:'no-color']
    Sickill::Rainbow.enabled = false
  end

  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
