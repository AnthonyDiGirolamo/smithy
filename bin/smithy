#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end

# Add the lib dir to the ruby library search path
@@smithy_bin_root = File.expand_path(File.dirname(File.realpath(__FILE__))+ '/../')
$: << File.expand_path(@@smithy_bin_root + '/lib')

require 'rubygems'
require 'gli'
require 'English'
require 'open4'
require 'rainbow'
require 'readline'
require 'terminal-table'
require 'smithy'

include GLI
include Smithy

version Smithy::VERSION
@smithy_config_file = File.join(@@smithy_bin_root,"etc/smithyrc")

program_desc "Smithy will help you build, test, and distribute software with ease."

desc "Machine architecure to operate on"
arg_name "NAME"
flag [:arch]

desc "Group name for files created by smithy"
default_value "ccsstaff"
arg_name "GROUP"
flag ["file-group-name"]

desc "Disable group writable file creation"
switch ["disable-group-writable"]

desc "The root level directory for software"
arg_name "PATH"
flag ["software-root"]

desc "Don't use colors"
switch "no-color"

desc "Alternate config file (default: #{@smithy_config_file})"
arg_name "FILE"
flag [:"config-file"]

desc "Search currently installed software"
arg_name "PATTERN"
command ['search'] do |c|
  output_formats = {
    'path'  => Smithy::Format::Path.new,
    'name'  => Smithy::Format::Name.new,
    'table' => Smithy::Format::Table.new,
    'csv'   => Smithy::Format::CSV.new
  }
  c.desc 'Format of the output'
  c.arg_name output_formats.keys.join('|')
  c.default_value output_formats.keys.first
  c.flag :format

  #sorting = %w{name date user}
  #c.desc 'Field to sort in ascending order'
  #c.arg_name sorting.join('|')
  #c.default_value sorting.first
  #c.flag :sort

  c.action do |global_options,options,args|
    formatter = output_formats[options[:format]]
    raise "Unknow format \"#{options[:format]}\" valid formats include: #{output_formats.keys.join(',')}" if formatter.nil?

    notice "Searching in #{global_options[:full_software_root_path]}"

    # Array of full paths to rebuild scripts
    #software = Dir.glob(global_options[:full_software_root_path]+"/*/*/*/rebuild").sort
    software = Dir.glob(global_options[:full_software_root_path]+"/*/*/*/")
    #software.collect!{|s| s.gsub(/\/rebuild$/, '')}
    software.collect!{|s| s.gsub(/\/$/, '')}
    software.sort!

    count = 0
    formatter.before
    if args.empty?
      formatter.format(software, global_options[:full_software_root_path])
      count += software.count
    else
      args.each do |a|
        result = software.select { |s| s =~ /#{a}/ }
        formatter.format(result, global_options[:full_software_root_path])
        count += result.count
      end
    end
    formatter.after

    notice "#{count} Found"
  end
end

desc "Build software"
long_desc "The software to build may be either the absolute path or the full name of the software. The full name includes version numbers and build names using the format: NAME/VERSION/BUILD."
arg_name "PATH"
command ['build'] do |c|
  c.desc 'Build log file name located within the software prefix.'
  c.arg_name 'FILE'
  c.default_value 'build.log'
  c.flag ["build-log-name"]

  c.desc "Disable build logging"
  c.switch ["disable-build-log"]

  c.desc 'Send messages from underlying commands (configure, make, etc) to STDOUT.'
  c.switch [:s, "send-to-stdout"]

  c.desc 'See what packages will be built but without building them'
  c.switch [:n, "dry-run"]

  c.action do |global_options,options,args|
    packages = args
    if args.empty?
      notice "Reading package names from STDIN..."
      packages = STDIN.readlines.map{|p| p.chomp}
    end

    raise "You must supply at least one package to build" if packages.empty?

    packages.each do |package|
      p = Package.new :root => global_options[:"software-root"],
                      :arch => global_options[:arch],
                      :path => package,
                :file_group => global_options[:"file-group-name"],
             :disable_group => global_options[:"disable-group-writable"]

      if p.valid?
        p.run_rebuild_script :dry_run => options[:"dry-run"],
                     :disable_logging => options[:"disable-build-log"],
                      :build_log_name => options[:"build-log-name"],
                      :send_to_stdout => options[:"send-to-stdout"]
      end
    end
  end
end

desc "Generate a new build and all necessary files"
arg_name "NAME"
command :new do |c|
  c.desc "Create description file for website"
  c.switch ["web-description"]

  c.desc "See what files will be created when running new without creating them"
  c.switch [:n, "dry-run"]

  c.desc "Provide a source tarball to unpack (optional)"
  c.arg_name "FILE"
  c.flag [:t, :tarball]
  c.action do |global_options,options,args|
    raise "You must supply a name to create new packages" if args.empty?

    p = Package.new :root => global_options[:"software-root"],
                    :arch => global_options[:arch],
                    :path => args.first,
              :file_group => global_options[:"file-group-name"],
           :disable_group => global_options[:"disable-group-writable"]

    if p.valid?
       p.create :dry_run => options[:"dry-run"],
                    :web => options[:"web-description"]
      if options[:tarball]
        p.extract :archive => options[:tarball]
      end

    end
  end
end

desc "Edit package support files"
arg_name "NAME"
command ['edit'] do |c|
  c.desc "Editor for opening script files"
  c.flag [:e, :editor]

  c.desc "Edit a build script (this is the default behavior)"
  c.switch [:b, :build]
  c.desc "Edit modules loaded for the build script"
  c.switch [:c, :"compile-time-modules"]
  c.desc "Edit a test script"
  c.switch [:t, :test]
  c.desc "Edit the package's module-file"
  c.switch [:m, :module]

  c.action do |global_options,options,args|
    editor = options[:editor] || ENV['EDITOR']
    raise """Please specify which editor to launch using the
       $EDITOR environment variable or the --editor option.""" if editor.blank?

    raise "You must supply a package name to edit" if args.empty?

    p = Package.new :root => global_options[:"software-root"],
                    :arch => global_options[:arch],
                    :path => args.first,
              :file_group => global_options[:"file-group-name"]
    if p.valid?
      p.prefix_exists!
      p.rebuild_script_exists!

      file_name = p.rebuild_script
      file_name = p.prefix + "/remodule" if options[:c]

      file_before = File.stat(file_name)
      status = Kernel::system(editor, file_name)
      #puts status
      #puts $CHILD_STATUS
      # Compare modification times
      if status && File.stat(file_name) > file_before
        notice "Modified #{file_name}"
      end
    end
  end
end

desc "Repair a package"
long_desc "Repair permissions and check that files exist"
arg_name "NAME"
command ['repair'] do |c|
  c.action do |global_options,options,args|
    packages = args
    if args.empty?
      notice "Reading package names from STDIN..."
      packages = STDIN.readlines.map{|p| p.chomp}
    end

    raise "You must supply at least one package to repair" if packages.empty?

    packages.each do |package|
      p = Package.new :root => global_options[:"software-root"],
                      :arch => global_options[:arch],
                      :path => package,
                :file_group => global_options[:"file-group-name"],
             :disable_group => global_options[:"disable-group-writable"]

      if p.valid?
        p.repair :dry_run => options[:"dry-run"]
      end
    end
  end
end

desc "Deploy a package"
long_desc "Place module files in the correct locations and update web descriptions."
arg_name "NAME"
command ['deploy'] do |c|
  c.action do |global_options,options,args|
  end
end

pre do |global,command,options,args|
  # Load and merge the system config values with command line values, options on
  # the command line take precedence.
  global.merge! load_system_config(global) do |key, values_command_line, values_config|
    if values_command_line.nil?
      values_config
    else
      values_command_line
    end
  end

  Sickill::Rainbow.enabled = false if global[:"no-color"]

  # Pre logic here
  # Return true to proceed; false to abort and not call the chosen command
  # Use skips_pre before a command to skip this block on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
